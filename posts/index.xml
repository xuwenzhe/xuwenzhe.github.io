<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wenzhe&#39;s Blog</title>
    <link>https://xuwenzhe.github.io/posts/</link>
    <description>Recent content in Posts on Wenzhe&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 30 Aug 2020 02:45:00 -0700</lastBuildDate>
    
	<atom:link href="https://xuwenzhe.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spark数据倾斜及其解决方案</title>
      <link>https://xuwenzhe.github.io/2020/spark-data-skew/</link>
      <pubDate>Sun, 30 Aug 2020 02:45:00 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/spark-data-skew/</guid>
      <description>参考 Arganzheng&amp;rsquo;s Blog, Spark数据倾斜及其解决方案</description>
    </item>
    
    <item>
      <title>Spark FAQ</title>
      <link>https://xuwenzhe.github.io/2020/spark-fundamentals/</link>
      <pubDate>Sat, 29 Aug 2020 23:46:21 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/spark-fundamentals/</guid>
      <description>什么是Job, Stage, Task? Spark数据处理是像流水线一样，通过一系列操作（算子）完成对RDD的处理, 即RDD1 -&amp;gt; RDD2 -&amp;gt; ...。操作分为两类：Tran</description>
    </item>
    
    <item>
      <title>Linux入门</title>
      <link>https://xuwenzhe.github.io/2020/linux-intro/</link>
      <pubDate>Wed, 19 Aug 2020 17:17:14 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/linux-intro/</guid>
      <description>目录结构 /bin (/usr/bin, /usr/local/bin): binary,存放最经常使用的命令 /sbin (/usr/sbin, /usr/local/sbin): s: super user, 存放系统管理员使用的系统管理程序 /home: 存放普通用户的主目录，每个用户都有一个自己的目</description>
    </item>
    
    <item>
      <title>Precision和Recall</title>
      <link>https://xuwenzhe.github.io/2020/precision-recall/</link>
      <pubDate>Wed, 12 Aug 2020 22:00:55 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/precision-recall/</guid>
      <description>什么是精确率（precision）与召回率（recall）？ Precision和Recall是衡量模型预测能力的指标。在简单的分类问题（种类</description>
    </item>
    
    <item>
      <title>网络广告是如何用cookie来追踪用户的？</title>
      <link>https://xuwenzhe.github.io/2020/cookie-track-user/</link>
      <pubDate>Sun, 09 Aug 2020 23:51:42 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/cookie-track-user/</guid>
      <description>什么是Cookie 参考 Web客户端追踪(上)-Cookie追踪 网络广告代理商是如何通过 cookie 收集用户信息的？ - LO的回答 - 知乎 RTB广告竞价系统</description>
    </item>
    
    <item>
      <title>从Pandas到PySpark</title>
      <link>https://xuwenzhe.github.io/2020/from-pandas-to-pyspark/</link>
      <pubDate>Sun, 09 Aug 2020 22:25:25 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/from-pandas-to-pyspark/</guid>
      <description>PySpark的特性 Immutable Changes create new object references Old versions are unchanged Lazy Compute does not happen until output is requested Pandas VS PySpark Load CSV # Pandas df = pd.read_csv(&amp;#34;datafile.csv&amp;#34;) # PySpark df = spark.read.options(header=True, inferSchema=True).csv(&amp;#34;datafile.csv&amp;#34;) View Dataframe # Pandas df # PySpark df.show() Columns &amp;amp; Data Types # Pandas df.columns df.dtypes # PySpark df.columns df.dtypes Rename Columns # Pandas df.columns</description>
    </item>
    
    <item>
      <title>Coursera Spark</title>
      <link>https://xuwenzhe.github.io/2020/coursera-spark/</link>
      <pubDate>Wed, 05 Aug 2020 15:42:21 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/coursera-spark/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git与Github使用</title>
      <link>https://xuwenzhe.github.io/2020/git-github/</link>
      <pubDate>Tue, 28 Jul 2020 12:31:43 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/git-github/</guid>
      <description>The git directory acts as a database for all the changes tracked in Git and the working tree acts as a sandbox where we can edit the current versions of the files. 1. 基本操作 git init # 创建仓库 # 登陆当前操作系统的用户范围 (否则为项目级别) git config --global</description>
    </item>
    
    <item>
      <title>Leetcode：位运算</title>
      <link>https://xuwenzhe.github.io/2020/leetcode-bit-manipulation/</link>
      <pubDate>Sun, 26 Jul 2020 23:50:06 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/leetcode-bit-manipulation/</guid>
      <description>while位 342. Power of Four (easy) 简述：判断是否为4的幂 思路：mask挪位置 联系：出自693 # class Solution(object): # def isPowerOfFour(self, num): # &amp;#34;&amp;#34;&amp;#34; # :type num: int # :rtype: bool # &amp;#34;&amp;#34;&amp;#34; # base = 1 while base &amp;lt;= num: # if base ==</description>
    </item>
    
    <item>
      <title>Leetcode：树的Traversal</title>
      <link>https://xuwenzhe.github.io/2020/leetcode-tree-traversal/</link>
      <pubDate>Thu, 16 Jul 2020 12:46:49 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/leetcode-tree-traversal/</guid>
      <description>In-Order 230. Kth Smallest Element in a BST (medium) 简述：在BST中，求第k小的值 思路：inorder，记录遍历idx 联系：模板题 # class Solution(object): # def kthSmallest(self, root, k): # &amp;#34;&amp;#34;&amp;#34; # :type root: TreeNode # :type k: int # :rtype: int #</description>
    </item>
    
    <item>
      <title>Leetcode：树的Divide &amp; Conquer</title>
      <link>https://xuwenzhe.github.io/2020/leetcode-divide-conquer/</link>
      <pubDate>Fri, 10 Jul 2020 00:20:03 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/leetcode-divide-conquer/</guid>
      <description>100. Same Tree (easy) 简述：判断两棵二叉树是否相同 思路：分治法 联系：模板题 # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None # class Solution(object): # def isSameTree(self, p, q): # &amp;#34;&amp;#34;&amp;#34; # :type p: TreeNode</description>
    </item>
    
    <item>
      <title>Leetcode：二分查找</title>
      <link>https://xuwenzhe.github.io/2020/leetcode-binary-search/</link>
      <pubDate>Tue, 07 Jul 2020 19:47:02 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/leetcode-binary-search/</guid>
      <description>模板 # def binarySearch(nums, target): # if len(nums) == 0: # return -1 # start, end = 0, len(nums) - 1 while start + 1 &amp;lt; end: # 要点3-1 mid = (start + end) // 2 # 要点3-2: python动态数据类型 # if nums[start] &amp;lt; target: start = mid # 要</description>
    </item>
    
    <item>
      <title>Foundational Finance for Strategic Decision Making</title>
      <link>https://xuwenzhe.github.io/2020/coursera-umich-fffsdm/</link>
      <pubDate>Mon, 06 Jul 2020 21:02:03 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/coursera-umich-fffsdm/</guid>
      <description>Coursera specializations offered by UM
Course I Time Value of Money Simple Future Value (FV)  PV = Present Value (unit: $) FV = Present Value (unit: $) n = # of Periods (#) r = Interest Rate (%, not $) &amp;gt; 0 (assumption)  Insight: A dollar today is worth more than a dollar tomorrow.
You cannot compare money across time.
Example: Power of Compounding!
Peter Minuit bought the Manhattan Island from Native Americans for $24 in 1626.</description>
    </item>
    
    <item>
      <title>使用 Hugo &#43; Github Pages 搭建个人博客</title>
      <link>https://xuwenzhe.github.io/2020/hugo-blog-site/</link>
      <pubDate>Fri, 03 Jul 2020 01:17:52 -0700</pubDate>
      
      <guid>https://xuwenzhe.github.io/2020/hugo-blog-site/</guid>
      <description>Hugo: 一个静态网页生成器，将markdown格式的博文编译为HTML，CSS，JavaScript Github Pages: 静态网页托管服务，将hugo转化后的博客公</description>
    </item>
    
  </channel>
</rss>